pipeline {
    agent any

    environment {
        REGISTRY="docker-reg.example.com"
        DEPLOYMENT_ENV="prod"
        IMAGE_CREATED_BY="jenkins"
        PROJECT_NAME="webui-admin-web"
        K8S_NAMESPACE="webuidb-version2"

        GIT_TAG=sh(returnStdout: true, script: '''
            echo $(git describe --tags)
        ''').trim()

        //Host specific configuration
        HOST_VOLUME_LOCATION="$JENKINS_DATA_LOCATION"


        PROJECT_LOCATION="$HOST_VOLUME_LOCATION/workspace/$JOB_NAME"
        IMAGE_VERSION="$BUILD_NUMBER-$IMAGE_CREATED_BY-$GIT_TAG-$DEPLOYMENT_ENV"
        IMAGE_REPOSITORY_NAME="$REGISTRY/$PROJECT_NAME"
        DOCKER_TAG="$IMAGE_REPOSITORY_NAME:$IMAGE_VERSION"
        DEPLOYMENT_DIRECTORY="./deploy"


        //k8s cluster specific configuration
        K8S_SERVICE_NAME="$PROJECT_NAME"
        K8S_CHANGE_CAUSE="$IMAGE_VERSION"


        //Port configuration
        K8S_SERVICE_PORT="80"
        K8S_CONTAINER_PORT="80"
        K8S_PORT_NAME="admin-web"

        K8S_NODE_PORT="31003"


        //Health check uri
        K8S_STATUS_URI="/index.html"


        //Memory allocation
        K8S_MIN_RAM_POD="40Mi"
        K8S_MAX_RAM_POD="60Mi"


        //Application configurations and credential

        dockerImage = ''
        dockerRegistryCredential='docker-reg-oss-net-bd'
        DOCKER_REGISTRY_URL="https://$REGISTRY"


       webui_HOSTNAME="webui-admin.example.com"

    }

    stages {
        stage('Test') {
            steps {
                sh '''
                echo "--USER->>$(id -u -n) _uid=$(id -u)<<----->$K8S_NODE_PORT jnkins location ==> $JENKINS_DATA_LOCATION job name $JOB_NAME tag name $GIT_TAG"
                '''
            }
        }

        stage('Create nginx config for host mapping') {
            steps {
                sh '''
                cat ./deploy/webui-admin-web.conf.tm|sed "s/webui_HOSTNAME/$webui_HOSTNAME/g" > ./deploy/webui-admin-web.conf
                cat ./deploy/webui-admin-web.conf
                '''
            }
        }

        stage('Building Angular DIST content and Docker image') {
            steps {
                script {
                    dockerImage = docker.build("$DOCKER_TAG", "-f Dockerfile .")
                }
                sh '''
                docker images|grep $PROJECT_NAME
                '''
            }
        }

        stage('Push docker image') {
            steps{
                script {
                    docker.withRegistry( "$DOCKER_REGISTRY_URL", dockerRegistryCredential ) {
                        dockerImage.push()
                        sh "docker images | grep $IMAGE_REPOSITORY_NAME"
                    }

                }
            }
        }


        stage('Clear image from local after push to Registry') {
            steps {
                echo "Cleaning local docker registry $IMAGE_REPOSITORY_NAME"
                sh '''
                docker rmi $(docker images | grep $IMAGE_REPOSITORY_NAME | awk -F' ' '{print $3}')
                '''
            }
        }

        stage('Deploy Pod') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-deploy.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-deploy.yaml | kubectl apply -f -
                kubectl rollout status -n $K8S_NAMESPACE deployment $PROJECT_NAME --timeout 180s
                '''
        }
    }
        stage('Deploy Service') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-service.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-service.yaml | kubectl apply -f -
                '''
                }
            }
        }
    }